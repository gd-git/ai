# -*- coding: utf-8 -*-
# set tabstop=4

import os
dirname=os.path.dirname(__file__)
with open(f"{dirname}/imports", 'r') as f:
    exec(f.read())
#from tools import error as error  
def error(msg): tools.error(msg)


def scanOneBloc(code, langage):

    if langage != "" :
        file_type="text/x-"+langage
    else :
        # Détermine le langage du code python-magic
        m = magic.Magic(mime=True)
        file_type = m.from_buffer(code).replace("script.", "")

        if file_type =="text/plain" :
            # Déterminez le langage du code mimetypes
            file_type, _ = mimetypes.guess_type(code)
            if not file_type :
                file_type="text/plain"
                
    try:
        # Créez un objet Lexer à partir du type MIME
        lexer = get_lexer_for_mimetype(file_type)
        
    except ValueError as e:
        try :
            lexer=guess_lexer(code)
        except ValueError as e:
            print(f"Erreur : guess_lexer ({file_type}) - {e}")
            return code+'```\n'

    try:
        style=config.conf['colors_style']
    except :
        config.conf['colors_style']="default"

    if config.conf['background'] == "dark" :
        formatter = Terminal256Formatter(fg='dark', bg='light', style=config.conf['colors_style'])
    else :
        formatter = Terminal256Formatter(fg='light', bg='dark', style=config.conf['colors_style'])

    highlighted_code = pygments.highlight(code, lexer, formatter)

    # Renvoyez le code colorisé
    return highlighted_code+'```\n' #.replace(r"\033", chr(27))


def scanForBlocs(lines):
    in_code = False
    new = []
    bloc = []
    langage=""

    for line in lines:
        #print("    ---> line: "+line)
        if re.match(r'^ *```', line):
            #print("MATHC")

            if in_code:
                # Bloc de code terminé, appliquer la fonction change
                #modified_bloc = change("\n".join(bloc))
                modified_bloc = scanOneBloc("\n".join(bloc), langage)
                #new.extend(modified_bloc)
                #new.extend(modified_bloc.split('\n'))
                new.append(modified_bloc)
                #new.append(line)
                in_code = False
                bloc = []
            else:
                # Début d'un bloc de code
                langage=line[3:].strip()
                in_code = True
                new.append(line)
        else:
            if in_code:
                # Ajouter la ligne au bloc de code
                bloc.append(line)
                #new.append(line)
            else:
                # Ajouter la ligne au résultat
                new.append(line)
    return "\n".join(new)

    #return "".join(new)

def add_chunk(chunk):
    # Analyse du chunk pour obtenir des lex
    lex = list(llm.markdownLexer.get_tokens(chunk))
    # Coloration des lex
    result = ""
    for token in lex:
        if token[0] == Token.Text:
            result += pygments.highlight(token[1], llm.markdownLexer, llm.formatter)
        else:
            result += token[1]
    return result
